package foo

// Code generated by repo-generator v0.1.0. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"fmt"
	"repo-generator/testdata/deps"
	"strings"

	"github.com/dohernandez/errors"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/lib/pq"
)

var (
	// ErrAssetScan is the error that indicates a Asset scan failed.
	ErrAssetScan = errors.New("scan")
	// ErrAssetNotFound is the error that indicates a Asset was not found.
	ErrAssetNotFound = errors.New("not found")
	// ErrAssetExists is returned when the Asset already exists.
	ErrAssetExists = errors.New("exists")
)

// AssetRow is an interface for anything that can scan a Asset, copying the columns from the matched
// row into the values pointed at by dest.
type AssetRow interface {
	Scan(dest ...any) error
}

// AssetSQLDB is an interface for anything that can execute the SQL statements needed to
// perform the Asset operations.
type AssetSQLDB interface {
	QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error)
	QueryRowContext(ctx context.Context, query string, args ...any) *sql.Row
	ExecContext(ctx context.Context, q string, args ...interface{}) (sql.Result, error)
	BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error)
}

// AssetRepo is a repository for the Asset.
type AssetRepo struct {
	// db is the database connection.
	db AssetSQLDB

	// table is the table name.
	table string

	// colChainID is the Asset.ChainID column name. It can be used in a queries to specify the column.
	colChainID string
	// colAddress is the Asset.Address column name. It can be used in a queries to specify the column.
	colAddress string
	// colBlockHash is the Asset.BlockHash column name. It can be used in a queries to specify the column.
	colBlockHash string
	// colType is the Asset.Type column name. It can be used in a queries to specify the column.
	colType string
	// colName is the Asset.Name column name. It can be used in a queries to specify the column.
	colName string
	// colSymbol is the Asset.Symbol column name. It can be used in a queries to specify the column.
	colSymbol string
	// colMetadata is the Asset.Metadata column name. It can be used in a queries to specify the column.
	colMetadata string
	// colImmutable is the Asset.Immutable column name. It can be used in a queries to specify the column.
	colImmutable string
	// colCreatedAt is the Asset.CreatedAt column name. It can be used in a queries to specify the column.
	colCreatedAt string
	// colUpdatedAt is the Asset.UpdatedAt column name. It can be used in a queries to specify the column.
	colUpdatedAt string
}

// NewAssetRepo creates a new AssetRepo.
func NewAssetRepo(db AssetSQLDB, table string) *AssetRepo {
	return &AssetRepo{
		db:    db,
		table: table,

		colChainID:   "chain_id",
		colAddress:   "address",
		colBlockHash: "block_hash",
		colType:      "types",
		colName:      "name",
		colSymbol:    "symbol",
		colMetadata:  "metadata",
		colImmutable: "immutable",
		colCreatedAt: "created_at",
		colUpdatedAt: "updated_at",
	}
}

// Table returns the table name.
func (repo *AssetRepo) Table() string {
	return repo.table
}

// Cols returns the represented cols of Asset.
// Cols are returned in the order they are scanned.
func (repo *AssetRepo) Cols() []string {
	return []string{
		repo.colChainID,
		repo.colAddress,
		repo.colBlockHash,
		repo.colType,
		repo.colName,
		repo.colSymbol,
		repo.colMetadata,
		repo.colImmutable,
		repo.colCreatedAt,
		repo.colUpdatedAt,
	}
}

// Scan scans a Asset from the given AssetRow (sql.Row|sql.Rows).
func (repo *AssetRepo) Scan(_ context.Context, s AssetRow) (*Asset, error) {
	var (
		m Asset

		address   string
		blockHash string
		typs      pq.StringArray
	)

	err := s.Scan(
		&m.ChainID,
		&address,
		&blockHash,
		&typs,
		&m.Name,
		&m.Symbol,
		&m.Metadata,
		&m.Immutable,
		&m.CreatedAt,
		&m.UpdatedAt,
	)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrAssetNotFound
		}

		var pgErr *pgconn.PgError

		if errors.As(err, &pgErr) && pgErr.Code == pgerrcode.UniqueViolation {
			return nil, errors.WrapError(err, ErrAssetExists)
		}

		return nil, errors.WrapError(err, ErrAssetScan)
	}

	m.Address = deps.HexToAddress(address)
	m.BlockHash = deps.HexToHash(blockHash)

	for i := range typs {
		m.Type = append(m.Type, deps.AssetContractType(typs[i]))
	}

	return &m, nil
}

// ScanAll scans a slice of Asset from the given sql.Rows.
func (repo *AssetRepo) ScanAll(ctx context.Context, rs *sql.Rows) ([]*Asset, error) {
	var ms []*Asset

	for rs.Next() {
		m, err := repo.Scan(ctx, rs)
		if err != nil {
			return nil, err
		}

		ms = append(ms, m)
	}

	if len(ms) == 0 {
		return nil, ErrAssetNotFound
	}

	return ms, nil
}

// Create creates a new Asset and returns it after persisting.
func (repo *AssetRepo) Create(ctx context.Context, m *Asset) (*Asset, error) {
	var (
		cols []string
		args []interface{}
	)

	cols = append(cols, repo.colChainID)
	args = append(args, m.ChainID)

	cols = append(cols, repo.colAddress)
	args = append(args, m.Address.String())

	cols = append(cols, repo.colBlockHash)
	args = append(args, m.BlockHash.String())

	typs := make([]string, len(m.Type))

	for i := range m.Type {
		typs[i] = string(m.Type[i])
	}

	cols = append(cols, repo.colType)
	args = append(args, typs)

	cols = append(cols, repo.colName)
	args = append(args, m.Name)

	cols = append(cols, repo.colSymbol)
	args = append(args, m.Symbol)

	cols = append(cols, repo.colMetadata)
	args = append(args, m.Metadata)

	cols = append(cols, repo.colImmutable)
	args = append(args, m.Immutable)

	cols = append(cols, repo.colCreatedAt)
	args = append(args, m.CreatedAt)

	cols = append(cols, repo.colUpdatedAt)
	args = append(args, m.UpdatedAt)

	values := make([]string, len(cols))

	for i := range cols {
		values[i] = fmt.Sprintf("$%d", i+1)
	}

	qCols := strings.Join(cols, ", ")
	qValues := strings.Join(values, ", ")

	sql := "INSERT INTO %s (%s) VALUES (%s)"
	sql = fmt.Sprintf(sql, repo.table, qCols, qValues)

	_, err := repo.db.ExecContext(ctx, sql, args...)
	if err != nil {
		return nil, errors.Wrap(err, "exec context")
	}

	return m, nil
}
