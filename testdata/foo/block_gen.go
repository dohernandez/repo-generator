package foo

// Code generated by repo-generator. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/dohernandez/errors"
	"github.com/dohernandez/repo-generator/testdata/deps"
	"math/big"
	"strings"
)

var (
	ErrBlockScan     = errors.New("scan")
	ErrBlockNotFound = errors.New("not found")
)

type BlockScanner interface {
	Scan(dest ...any) error
}

type BlockRepo struct {
	db    *sql.DB
	table string

	stateCols []string

	keyCols []string

	cols []string
}

func NewBlockRepo(db *sql.DB, table string) *BlockRepo {
	keyCols := []string{
		"id",
	}

	stateCols := []string{
		"chain_id",
		"hash",
		"number",
		"parent_hash",
		"block_timestamp",
	}

	cols := append(keyCols, stateCols...)

	return &BlockRepo{
		db:    db,
		table: table,

		keyCols:   keyCols,
		stateCols: stateCols,
		cols:      cols,
	}
}

func (repo *BlockRepo) Scan(_ context.Context, s BlockScanner) (*Block, error) {
	var (
		m Block

		hash           sql.NullString
		number         int64
		parentHash     sql.NullString
		blockTimestamp sql.NullTime
	)

	err := s.Scan(
		&m.ID,
		&m.ChainID,
		&hash,
		&number,
		&parentHash,
		&blockTimestamp,
	)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrBlockNotFound
		}

		return nil, errors.WrapError(err, ErrBlockScan)
	}

	if hash.Valid {
		m.Hash = deps.HexToHash(hash.String)
	}

	m.Number = big.NewInt(number)

	if parentHash.Valid {
		m.ParentHash = deps.HexToHash(parentHash.String)
	}

	if blockTimestamp.Valid {
		m.BlockTimestamp = blockTimestamp.Time.UTC()
	}

	return &m, nil
}

func (repo *BlockRepo) ScanAll(ctx context.Context, rs *sql.Rows) ([]*Block, error) {
	var ms []*Block

	for rs.Next() {
		m, err := repo.Scan(ctx, rs)
		if err != nil {
			return nil, err
		}

		ms = append(ms, m)
	}

	if len(ms) == 0 {
		return nil, ErrBlockNotFound
	}

	return ms, nil
}

func (repo *BlockRepo) Create(ctx context.Context, m *Block) (*Block, error) {
	var (
		cols []string
		args []interface{}
	)

	cols = append(cols, "id")
	args = append(args, m.ID)

	cols = append(cols, "chain_id")
	args = append(args, m.ChainID)

	var hash sql.NullString

	hash.String = m.Hash.String()
	hash.Valid = true

	cols = append(cols, "hash")
	args = append(args, hash)

	if m.Number != nil {
		cols = append(cols, "number")
		args = append(args, m.Number.Int64())
	}

	var parentHash sql.NullString

	parentHash.String = m.ParentHash.String()
	parentHash.Valid = true

	cols = append(cols, "parent_hash")
	args = append(args, parentHash)

	if !m.BlockTimestamp.IsZero() {
		var blockTimestamp sql.NullTime

		blockTimestamp.Time = m.BlockTimestamp
		blockTimestamp.Valid = true

		cols = append(cols, "block_timestamp")
		args = append(args, blockTimestamp)
	}

	values := make([]string, len(cols))

	for i := range cols {
		values[i] = fmt.Sprintf("$%d", i+1)
	}

	qCols := strings.Join(cols, ", ")
	qValues := strings.Join(values, ", ")

	rCols := strings.Join(repo.cols, ", ")

	sql := "INSERT INTO %s (%s) VALUES (%s) RETURNING %s"
	sql = fmt.Sprintf(sql, repo.table, qCols, qValues, rCols)

	return repo.Scan(ctx, repo.db.QueryRowContext(ctx, sql, args...))
}

func (repo *BlockRepo) Insert(ctx context.Context, ms ...*Block) error {
	// Build values query.
	var (
		valuesQueryBuilder strings.Builder
		lms                = len(ms)
	)

	var cols []string
	cols = append(cols, "id")
	cols = append(cols, "chain_id")
	cols = append(cols, "hash")
	cols = append(cols, "number")
	cols = append(cols, "parent_hash")
	cols = append(cols, "block_timestamp")

	lcols := len(cols)

	// Size is equal to the number of models (lms) multiplied by the number of columns (lcols).
	args := make([]interface{}, 0, lms*lcols)

	for i := range ms {
		m := ms[i]

		indexOffset := i * lcols
		valuesQueryBuilder.WriteString(repo.valuesStatement(cols, indexOffset, i != lms-1))

		if !IsIDZero(m.ID) {
			args = append(args, m.ID)
		} else {
			args = append(args, nil)
		}

		args = append(args, m.ChainID)

		var hash sql.NullString

		hash.String = m.Hash.String()
		hash.Valid = true

		args = append(args, hash)

		if m.Number != nil {
			args = append(args, m.Number.Int64())
		} else {
			args = append(args, nil)
		}

		var parentHash sql.NullString

		parentHash.String = m.ParentHash.String()
		parentHash.Valid = true

		args = append(args, parentHash)

		var blockTimestamp sql.NullTime

		if !m.BlockTimestamp.IsZero() {
			blockTimestamp.Time = m.BlockTimestamp
			blockTimestamp.Valid = true
		}

		args = append(args, blockTimestamp)

	}

	qCols := strings.Join(cols, ", ")

	sql := "INSERT INTO %s (%s) VALUES %s"
	sql = fmt.Sprintf(sql, repo.table, qCols, valuesQueryBuilder.String())

	_, err := repo.db.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "exec context")
	}

	return nil
}

func (repo *BlockRepo) valuesStatement(cols []string, offset int, separator bool) string {
	var sep string

	if separator {
		sep = ","
	}

	values := make([]string, len(cols))
	for i := range cols {
		values[i] = fmt.Sprintf("$%d", offset+(i+1))
	}

	return fmt.Sprintf("(%s)%s", strings.Join(values, ", "), sep)
}
