package foo

// Code generated by repo-generator v0.1.0. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/dohernandez/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5/pgconn"
)

var (
	// ErrCursorScan is the error that indicates a Cursor scan failed.
	ErrCursorScan = errors.New("scan")
	// ErrCursorNotFound is the error that indicates a Cursor was not found.
	ErrCursorNotFound = errors.New("not found")
	// ErrCursorExists is returned when the Cursor already exists.
	ErrCursorExists = errors.New("exists")
)

// CursorRow is an interface for anything that can scan a Cursor, copying the columns from the matched
// row into the values pointed at by dest.
type CursorRow interface {
	Scan(dest ...any) error
}

// CursorRepo is a repository for the Cursor.
type CursorRepo struct {
	// db is the database connection.
	db *sql.DB

	// table is the table name.
	table string

	// colID is the Cursor.ID column name. It can be used in a queries to specify the column.
	colID string
	// colName is the Cursor.Name column name. It can be used in a queries to specify the column.
	colName string
	// colPosition is the Cursor.Position column name. It can be used in a queries to specify the column.
	colPosition string
	// colLeader is the Cursor.Leader column name. It can be used in a queries to specify the column.
	colLeader string
	// colLeaderElectedAt is the Cursor.LeaderElectedAt column name. It can be used in a queries to specify the column.
	colLeaderElectedAt string
	// colCreatedAt is the Cursor.CreatedAt column name. It can be used in a queries to specify the column.
	colCreatedAt string
	// colUpdatedAt is the Cursor.UpdatedAt column name. It can be used in a queries to specify the column.
	colUpdatedAt string
}

// NewCursorRepo creates a new CursorRepo.
func NewCursorRepo(db *sql.DB, table string) *CursorRepo {
	return &CursorRepo{
		db:    db,
		table: table,

		colID:              "id",
		colName:            "name",
		colPosition:        "position",
		colLeader:          "leader",
		colLeaderElectedAt: "leader_elected_at",
		colCreatedAt:       "created_at",
		colUpdatedAt:       "updated_at",
	}
}

// Scan scans a Cursor from the given CursorRow (sql.Row|sql.Rows).
func (repo *CursorRepo) Scan(_ context.Context, s CursorRow) (*Cursor, error) {
	var (
		m Cursor

		position        sql.NullString
		leader          sql.NullString
		leaderElectedAt sql.NullTime
	)

	err := s.Scan(
		&m.ID,
		&m.Name,
		&position,
		&leader,
		&leaderElectedAt,
		&m.CreatedAt,
		&m.UpdatedAt,
	)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrCursorNotFound
		}

		var pgErr *pgconn.PgError

		if errors.As(err, &pgErr) && pgErr.Code == pgerrcode.UniqueViolation {
			return nil, errors.WrapError(err, ErrCursorExists)
		}

		return nil, errors.WrapError(err, ErrCursorScan)
	}

	if position.Valid {
		m.Position = uuid.MustParse(position.String)
	}

	if leader.Valid {
		m.Leader = uuid.MustParse(leader.String)
	}

	if leaderElectedAt.Valid {
		m.LeaderElectedAt = leaderElectedAt.Time
	}

	return &m, nil
}

// ScanAll scans a slice of Cursor from the given sql.Rows.
func (repo *CursorRepo) ScanAll(ctx context.Context, rs *sql.Rows) ([]*Cursor, error) {
	var ms []*Cursor

	for rs.Next() {
		m, err := repo.Scan(ctx, rs)
		if err != nil {
			return nil, err
		}

		ms = append(ms, m)
	}

	if len(ms) == 0 {
		return nil, ErrCursorNotFound
	}

	return ms, nil
}

// Create creates a new Cursor and returns it after persisting.
func (repo *CursorRepo) Create(ctx context.Context, m *Cursor) (*Cursor, error) {
	var (
		cols []string
		args []interface{}
	)

	cols = append(cols, repo.colID)
	args = append(args, m.ID)

	cols = append(cols, repo.colName)
	args = append(args, m.Name)

	var position sql.NullString

	position.String = m.Position.String()
	position.Valid = true

	cols = append(cols, repo.colPosition)
	args = append(args, position)

	var leader sql.NullString

	leader.String = m.Leader.String()
	leader.Valid = true

	cols = append(cols, repo.colLeader)
	args = append(args, leader)

	var leaderElectedAt sql.NullTime

	leaderElectedAt.Time = m.LeaderElectedAt
	leaderElectedAt.Valid = true

	cols = append(cols, repo.colLeaderElectedAt)
	args = append(args, leaderElectedAt)

	cols = append(cols, repo.colCreatedAt)
	args = append(args, m.CreatedAt)

	cols = append(cols, repo.colUpdatedAt)
	args = append(args, m.UpdatedAt)

	values := make([]string, len(cols))

	for i := range cols {
		values[i] = fmt.Sprintf("$%d", i+1)
	}

	qCols := strings.Join(cols, ", ")
	qValues := strings.Join(values, ", ")

	sql := "INSERT INTO %s (%s) VALUES (%s)"
	sql = fmt.Sprintf(sql, repo.table, qCols, qValues)

	_, err := repo.db.ExecContext(ctx, sql, args...)
	if err != nil {
		return nil, errors.Wrap(err, "exec context")
	}

	return m, nil
}

// Insert inserts one or more Cursor records into the database.
//
// When using this method the Cursor fields that are tag as "auto" should be set as the other fields non tag as "auto".
// The same applies for those other fields that are tag as "omitempty".
func (repo *CursorRepo) Insert(ctx context.Context, ms ...*Cursor) error {
	// Build values query.
	var (
		valuesQueryBuilder strings.Builder
		lms                = len(ms)
	)

	var cols []string

	cols = append(cols, repo.colID)
	cols = append(cols, repo.colName)
	cols = append(cols, repo.colPosition)
	cols = append(cols, repo.colLeader)
	cols = append(cols, repo.colLeaderElectedAt)
	cols = append(cols, repo.colCreatedAt)
	cols = append(cols, repo.colUpdatedAt)

	lcols := len(cols)

	// Size is equal to the number of models (lms) multiplied by the number of columns (lcols).
	args := make([]interface{}, 0, lms*lcols)

	for idx := range ms {
		m := ms[idx]

		indexOffset := idx * lcols

		valuesQueryBuilder.WriteString(repo.valuesStatement(cols, indexOffset, idx != lms-1))

		args = append(args, m.ID)

		args = append(args, m.Name)

		var position sql.NullString

		position.String = m.Position.String()
		position.Valid = true

		args = append(args, position)

		var leader sql.NullString

		leader.String = m.Leader.String()
		leader.Valid = true

		args = append(args, leader)

		var leaderElectedAt sql.NullTime

		leaderElectedAt.Time = m.LeaderElectedAt
		leaderElectedAt.Valid = true

		args = append(args, leaderElectedAt)

		args = append(args, m.CreatedAt)

		args = append(args, m.UpdatedAt)
	}

	qCols := strings.Join(cols, ", ")

	sql := "INSERT INTO %s (%s) VALUES %s"
	sql = fmt.Sprintf(sql, repo.table, qCols, valuesQueryBuilder.String())

	_, err := repo.db.ExecContext(ctx, sql, args...)
	if err != nil {
		var pgErr *pgconn.PgError

		if errors.As(err, &pgErr) && pgErr.Code == pgerrcode.UniqueViolation {
			return errors.WrapError(err, ErrCursorExists)
		}

		return errors.Wrap(err, "exec context")
	}

	return nil
}

// valuesStatement returns a string with the values statement ($n) for the given columns,
// starting from the given offset.
func (repo *CursorRepo) valuesStatement(cols []string, offset int, separator bool) string {
	var sep string

	if separator {
		sep = ","
	}

	values := make([]string, len(cols))
	for i := range cols {
		values[i] = fmt.Sprintf("$%d", offset+(i+1))
	}

	return fmt.Sprintf("(%s)%s", strings.Join(values, ", "), sep)
}
