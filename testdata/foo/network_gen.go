package foo

// Code generated by repo-generator. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/dohernandez/errors"
	"math/big"
	"strings"
)

var (
	ErrNetworkScan     = errors.New("scan")
	ErrNetworkNotFound = errors.New("not found")
	ErrNetworkUpdate   = errors.New("update")
)

type NetworkScanner interface {
	Scan(dest ...any) error
}

type NetworkRepo struct {
	db    *sql.DB
	table string

	stateCols []string

	keyCols []string

	cols []string
}

func NewNetworkRepo(db *sql.DB, table string) *NetworkRepo {
	keyCols := []string{
		"id",
		"token",
	}

	stateCols := []string{
		"uri",
		"number",
		"total",
		"ip",
		"created_at",
		"updated_at",
	}

	cols := append(keyCols, stateCols...)

	return &NetworkRepo{
		db:    db,
		table: table,

		keyCols:   keyCols,
		stateCols: stateCols,
		cols:      cols,
	}
}

func (repo *NetworkRepo) Scan(_ context.Context, s NetworkScanner) (*Network, error) {
	var (
		m Network

		uRI    sql.NullString
		number sql.NullInt64
		total  int64
		iP     string
	)

	err := s.Scan(
		&m.ID,
		&m.Token,
		&uRI,
		&number,
		&total,
		&iP,
		&m.CreatedAt,
		&m.UpdatedAt,
	)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrNetworkNotFound
		}

		return nil, errors.WrapError(err, ErrNetworkScan)
	}

	if uRI.Valid {
		m.URI = uRI.String
	}

	if number.Valid {
		m.Number = big.NewInt(number.Int64)
	}

	m.Total = bigNewInt(total)

	tmp := iP
	m.IP = &tmp

	return &m, nil
}

func (repo *NetworkRepo) ScanAll(ctx context.Context, rs *sql.Rows) ([]*Network, error) {
	var ms []*Network

	for rs.Next() {
		m, err := repo.Scan(ctx, rs)
		if err != nil {
			return nil, err
		}

		ms = append(ms, m)
	}

	if len(ms) == 0 {
		return nil, ErrNetworkNotFound
	}

	return ms, nil
}

func (repo *NetworkRepo) Create(ctx context.Context, m *Network) (*Network, error) {
	var (
		cols []string
		args []interface{}
	)

	if m.ID != "" {
		cols = append(cols, "id")
		args = append(args, m.ID)
	}

	cols = append(cols, "token")
	args = append(args, m.Token)

	var uRI sql.NullString

	uRI.String = m.URI
	uRI.Valid = true

	cols = append(cols, "uri")
	args = append(args, uRI)

	if m.Number != nil {
		var number sql.NullInt64

		number.Int64 = m.Number.Int64()
		number.Valid = true

		cols = append(cols, "number")
		args = append(args, number)
	}

	cols = append(cols, "total")
	args = append(args, m.Total.Int64())

	if m.IP != nil {
		cols = append(cols, "ip")
		args = append(args, *m.IP)
	}

	if !m.CreatedAt.IsZero() {
		cols = append(cols, "created_at")
		args = append(args, m.CreatedAt)
	}

	if !m.UpdatedAt.IsZero() {
		cols = append(cols, "updated_at")
		args = append(args, m.UpdatedAt)
	}

	values := make([]string, len(cols))

	for i := range cols {
		values[i] = fmt.Sprintf("$%d", i+1)
	}

	qCols := strings.Join(cols, ", ")
	qValues := strings.Join(values, ", ")

	rCols := strings.Join(repo.cols, ", ")

	sql := "INSERT INTO %s (%s) VALUES (%s) RETURNING %s"
	sql = fmt.Sprintf(sql, repo.table, qCols, qValues, rCols)

	return repo.Scan(ctx, repo.db.QueryRowContext(ctx, sql, args...))
}

func (repo *NetworkRepo) Insert(ctx context.Context, ms ...*Network) error {
	// Build values query.
	var (
		valuesQueryBuilder strings.Builder
		lms                = len(ms)
	)

	var cols []string
	cols = append(cols, "id")
	cols = append(cols, "token")
	cols = append(cols, "uri")
	cols = append(cols, "number")
	cols = append(cols, "total")
	cols = append(cols, "ip")
	cols = append(cols, "created_at")
	cols = append(cols, "updated_at")

	lcols := len(cols)

	// Size is equal to the number of models (lms) multiplied by the number of columns (lcols).
	args := make([]interface{}, 0, lms*lcols)

	for i := range ms {
		m := ms[i]

		indexOffset := i * lcols
		valuesQueryBuilder.WriteString(repo.valuesStatement(cols, indexOffset, i != lms-1))

		if m.ID != "" {
			args = append(args, m.ID)
		} else {
			args = append(args, nil)
		}

		args = append(args, m.Token)

		var uRI sql.NullString

		uRI.String = m.URI
		uRI.Valid = true

		args = append(args, uRI)

		var number sql.NullInt64

		if m.Number != nil {
			number.Int64 = m.Number.Int64()
			number.Valid = true
		}

		args = append(args, number)

		args = append(args, m.Total.Int64())

		if m.IP != nil {
			args = append(args, *m.IP)
		} else {
			args = append(args, nil)
		}

		if !m.CreatedAt.IsZero() {
			args = append(args, m.CreatedAt)
		} else {
			args = append(args, nil)
		}

		if !m.UpdatedAt.IsZero() {
			args = append(args, m.UpdatedAt)
		} else {
			args = append(args, nil)
		}

	}

	qCols := strings.Join(cols, ", ")

	sql := "INSERT INTO %s (%s) VALUES %s"
	sql = fmt.Sprintf(sql, repo.table, qCols, valuesQueryBuilder.String())

	_, err := repo.db.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "exec context")
	}

	return nil
}

func (repo *NetworkRepo) valuesStatement(cols []string, offset int, separator bool) string {
	var sep string

	if separator {
		sep = ","
	}

	values := make([]string, len(cols))
	for i := range cols {
		values[i] = fmt.Sprintf("$%d", offset+(i+1))
	}

	return fmt.Sprintf("(%s)%s", strings.Join(values, ", "), sep)
}

func (repo *NetworkRepo) Update(ctx context.Context, m *Network) error {
	var (
		sets   []string
		where  []string
		args   []interface{}
		offset = 1
	)
	where = append(where, fmt.Sprintf("id = $%d", offset))
	args = append(args, m.ID)

	offset++
	where = append(where, fmt.Sprintf("token = $%d", offset))
	args = append(args, m.Token)

	offset++

	sets = append(sets, fmt.Sprintf("uri = $%d", offset))
	args = append(args, m.URI)

	offset++

	if m.Number != nil {
		sets = append(sets, fmt.Sprintf("number = $%d", offset))
		args = append(args, m.Number.Int64())

		offset++
	}

	if m.Total.Int64() != 0 {
		sets = append(sets, fmt.Sprintf("total = $%d", offset))
		args = append(args, m.Total.Int64())

		offset++
	}

	if m.IP != nil {
		sets = append(sets, fmt.Sprintf("ip = $%d", offset))
		args = append(args, *m.IP)

		offset++
	}

	if !m.CreatedAt.IsZero() {
		sets = append(sets, fmt.Sprintf("created_at = $%d", offset))
		args = append(args, m.CreatedAt)

		offset++
	}

	if !m.UpdatedAt.IsZero() {
		sets = append(sets, fmt.Sprintf("updated_at = $%d", offset))
		args = append(args, m.UpdatedAt)

		offset++
	}

	qSets := strings.Join(sets, ", ")
	qWhere := strings.Join(where, " AND ")

	sql := "UPDATE %s SET %s WHERE %s"
	sql = fmt.Sprintf(sql, repo.table, qSets, qWhere)

	res, err := repo.db.ExecContext(ctx, sql, args...)
	if err != nil {
		return err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return err
	}

	if rowsAffected == 0 {
		return ErrNetworkUpdate
	}

	return nil
}
